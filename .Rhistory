norm_case_data <-
main_data_cases %>%
inner_join(pop_data_clean, by = "County") %>%
mutate(Population = as.integer(gsub(",","", Population))) %>% #Removes `,` and makes int
mutate(normalized_cases = case_count/Population) %>%
clean_names()
View(pop_data_clean)
# Import libraries --------------------------------------------------------
library(janitor)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(lubridate)
# Reading Data ------------------------------------------------------------
#Florida election results
election_data <-
read.csv(here::here("florida_county_election_results_2016.csv"))
pop_data_raw <-
read.csv(here::here("population_county_data.csv")) %>%
rename(Rank = "誰..Rank")
mobility_data_raw <-
read.csv(here::here("applemobilitytrends-2020-07-01.csv"))
#WHO COVID Date
covid_cases_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"
covid_deaths_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"
#Read Data to CSV
deaths <- read.csv(url(covid_deaths_url), stringsAsFactors = FALSE)
cases <- read.csv(url(covid_cases_url), stringsAsFactors = FALSE)
# Cleaning Cases Data -----------------------------------------------------
cases <-
cases %>%
filter(Country_Region == "US" & Province_State =="Florida") %>%
rename(County = Admin2) %>%
select(County, X1.22.20:ncol(cases)) %>%
filter(!County %in% c(
"Out of FL",
"Unassigned"
))
cases <- pivot_longer(cases, cols = X1.22.20:ncol(cases), names_to = "Date", values_to = "case_count")
# Remove X from date column
cases$Date <- gsub("X", "", cases$Date)
# set Date column to Date
cases$Date <- as.Date(cases$Date, format ="%m.%d.%y")
# Cleaning Deaths Data ----------------------------------------------------
deaths <-
deaths %>%
filter(Country_Region == "US" & Province_State == "Florida") %>%
rename(County = Admin2) %>%
select(County, X1.22.20:ncol(deaths)) %>%
filter(!County %in% c(
"Out of FL",
"Unassigned"
))
#Pivot data
deaths <- pivot_longer(deaths, cols = X1.22.20:ncol(deaths), names_to = "Date", values_to = "death_count")
#Remove X from date column
deaths$Date <- gsub("X", "", deaths$Date)
#Change data type to Date of Date column
deaths$Date <- as.Date(deaths$Date, format = "%m.%d.%y")
# Cleaning Population Data ------------------------------------------------
pop_data_clean <-
pop_data_raw %>%
mutate(County = gsub(" County", "", County)) %>%
clean_names()
# Cleaning Mobility Data --------------------------------------------------
#Select sub region florida only
mobility_data_clean <-
mobility_data_raw %>%
filter(sub.region == "Florida") %>%
clean_names()
#Select only Florida counties
mobility_data_clean <-
mobility_data_clean %>%
filter(geo_type == "county") %>%
clean_names()
#Remove County string from county, select correct columns
mobility_data_clean <-
mobility_data_clean %>%
mutate(region = gsub(" County", "", region)) %>%
select(region, x2020_01_13:ncol(mobility_data_clean)) %>%
clean_names()
# Pivot table to match formats
mobility_data_clean <-
pivot_longer(mobility_data_clean,
cols = x2020_01_13:ncol(mobility_data_clean),
names_to = "Date",
values_to ="Mobility"
)
# Remove X character from date string
mobility_data_clean <-
mobility_data_clean %>%
mutate(Date = gsub("x", "", Date)) %>%
clean_names()
#Change date column from char to date
mobility_data_clean <-
mobility_data_clean %>%
mutate(date = as.Date(date, format = "%Y_%m_%d"))
# Joining Election Data with COVID Data -----------------------------------
election_data <-
election_data %>%
rename(County = "誰..Vote.by.county")
main_data_cases <-
cases %>%
left_join(election_data, by = "County") %>%
clean_names()
main_data_deaths <-
deaths %>%
left_join(election_data, by = "County") %>%
clean_names()
# Joining Mobility Data ---------------------------------------------------
mobility_data_clean <-
mobility_data_clean %>%
rename(county = region) %>%
clean_names()
main_data_cases <-
main_data_cases %>%
left_join(mobility_data_clean, by = c("county", "date")) %>%
clean_names()
main_data_deaths <-
main_data_deaths %>%
left_join(mobility_data_clean, by = c("county", "date")) %>%
clean_names()
View(mobility_data_raw)
View(pop_data_clean)
norm_case_data <-
main_data_cases %>%
inner_join(pop_data_clean, by = "county") %>%
mutate(Population = as.integer(gsub(",","", Population))) %>% #Removes `,` and makes int
mutate(normalized_cases = case_count/Population) %>%
clean_names()
norm_case_data <-
main_data_cases %>%
inner_join(pop_data_clean, by = "county") %>%
mutate(population = as.integer(gsub(",","", population))) %>% #Removes `,` and makes int
mutate(normalized_cases = case_count/population) %>%
clean_names()
View(norm_case_data)
death_norm_data <-
main_data_deaths %>%
inner_join(pop_data_clean, by = "county")%>%
mutate(population = as.integer((gsub(",", "", population)))) %>%
mutate(deaths_normalized = death_count/population) %>%
clean_names()
View(death_norm_data)
# Cases
graph_data_cases <-
main_data_cases %>%
mutate(Party = as.factor(Party)) %>%
filter(case_count > 0)
# Cases
graph_data_cases <-
main_data_cases %>%
mutate(party = as.factor(party)) %>%
filter(case_count > 0)
#Filter for cases above 0 to help focus on important data
norm_case_data <-
norm_case_data %>%
filter(normalized_cases > 0)
#Refactor to correct colors
norm_case_data$party <- factor(
norm_case_data$party, levels = c("republican", "democrat")
)
#deaths normalized graph
death_norm_data <-
death_norm_data %>%
mutate(party = as.factor(party)) %>%
filter(death_count >0)
#Re factor Party
death_norm_data$party <- factor(
death_norm_data$party, levels = c("republican", "democrat")
)
library(janitor)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(lubridate)
# Reading Data ------------------------------------------------------------
#Florida election results
election_data <-
read.csv(here::here("florida_county_election_results_2016.csv"))
pop_data_raw <-
read.csv(here::here("population_county_data.csv")) %>%
rename(Rank = "誰..Rank")
mobility_data_raw <-
read.csv(here::here("applemobilitytrends-2020-07-01.csv"))
#WHO COVID Date
covid_cases_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"
covid_deaths_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"
#Read Data to CSV
deaths <- read.csv(url(covid_deaths_url), stringsAsFactors = FALSE)
cases <- read.csv(url(covid_cases_url), stringsAsFactors = FALSE)
# Cleaning Cases Data -----------------------------------------------------
cases <-
cases %>%
filter(Country_Region == "US" & Province_State =="Florida") %>%
rename(County = Admin2) %>%
select(County, X1.22.20:ncol(cases)) %>%
filter(!County %in% c(
"Out of FL",
"Unassigned"
))
cases <- pivot_longer(cases, cols = X1.22.20:ncol(cases), names_to = "Date", values_to = "case_count")
# Remove X from date column
cases$Date <- gsub("X", "", cases$Date)
# set Date column to Date
cases$Date <- as.Date(cases$Date, format ="%m.%d.%y")
# Cleaning Deaths Data ----------------------------------------------------
deaths <-
deaths %>%
filter(Country_Region == "US" & Province_State == "Florida") %>%
rename(County = Admin2) %>%
select(County, X1.22.20:ncol(deaths)) %>%
filter(!County %in% c(
"Out of FL",
"Unassigned"
))
#Pivot data
deaths <- pivot_longer(deaths, cols = X1.22.20:ncol(deaths), names_to = "Date", values_to = "death_count")
#Remove X from date column
deaths$Date <- gsub("X", "", deaths$Date)
#Change data type to Date of Date column
deaths$Date <- as.Date(deaths$Date, format = "%m.%d.%y")
# Cleaning Population Data ------------------------------------------------
pop_data_clean <-
pop_data_raw %>%
mutate(County = gsub(" County", "", County)) %>%
clean_names()
# Cleaning Mobility Data --------------------------------------------------
#Select sub region florida only
mobility_data_clean <-
mobility_data_raw %>%
filter(sub.region == "Florida") %>%
clean_names()
#Select only Florida counties
mobility_data_clean <-
mobility_data_clean %>%
filter(geo_type == "county") %>%
clean_names()
#Remove County string from county, select correct columns
mobility_data_clean <-
mobility_data_clean %>%
mutate(region = gsub(" County", "", region)) %>%
select(region, x2020_01_13:ncol(mobility_data_clean)) %>%
clean_names()
# Pivot table to match formats
mobility_data_clean <-
pivot_longer(mobility_data_clean,
cols = x2020_01_13:ncol(mobility_data_clean),
names_to = "Date",
values_to ="Mobility"
)
# Remove X character from date string
mobility_data_clean <-
mobility_data_clean %>%
mutate(Date = gsub("x", "", Date)) %>%
clean_names()
#Change date column from char to date
mobility_data_clean <-
mobility_data_clean %>%
mutate(date = as.Date(date, format = "%Y_%m_%d"))
# Joining Election Data with COVID Data -----------------------------------
election_data <-
election_data %>%
rename(County = "誰..Vote.by.county")
main_data_cases <-
cases %>%
left_join(election_data, by = "County") %>%
clean_names()
main_data_deaths <-
deaths %>%
left_join(election_data, by = "County") %>%
clean_names()
# Joining Mobility Data ---------------------------------------------------
mobility_data_clean <-
mobility_data_clean %>%
rename(county = region) %>%
clean_names()
main_data_cases <-
main_data_cases %>%
left_join(mobility_data_clean, by = c("county", "date")) %>%
clean_names()
main_data_deaths <-
main_data_deaths %>%
left_join(mobility_data_clean, by = c("county", "date")) %>%
clean_names()
# Normalizing Counts by Pop -----------------------------------------------
norm_case_data <-
main_data_cases %>%
inner_join(pop_data_clean, by = "county") %>%
mutate(population = as.integer(gsub(",","", population))) %>% #Removes `,` and makes int
mutate(normalized_cases = case_count/population) %>%
clean_names()
death_norm_data <-
main_data_deaths %>%
inner_join(pop_data_clean, by = "county")%>%
mutate(population = as.integer((gsub(",", "", population)))) %>%
mutate(deaths_normalized = death_count/population) %>%
clean_names()
# Cases
graph_data_cases <-
main_data_cases %>%
mutate(party = as.factor(party)) %>%
filter(case_count > 0)
#Filter for cases above 0 to help focus on important data
norm_case_data <-
norm_case_data %>%
filter(normalized_cases > 0)
#Refactor to correct colors
norm_case_data$party <- factor(
norm_case_data$party, levels = c("republican", "democrat")
)
#deaths normalized graph
death_norm_data <-
death_norm_data %>%
mutate(party = as.factor(party)) %>%
filter(death_count >0)
#Re factor Party
death_norm_data$party <- factor(
death_norm_data$party, levels = c("republican", "democrat")
)
View(main_data_cases)
# Notes -------------------------------------------------------------------
?multipleLM
# Notes -------------------------------------------------------------------
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stas)
library(stats)
# Import libraries --------------------------------------------------------
library(stats)
library(janitor)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(lubridate)
# Reading Data ------------------------------------------------------------
#Florida election results
election_data <-
read.csv(here::here("florida_county_election_results_2016.csv"))
pop_data_raw <-
read.csv(here::here("population_county_data.csv")) %>%
rename(Rank = "誰..Rank")
mobility_data_raw <-
read.csv(here::here("applemobilitytrends-2020-07-01.csv"))
#WHO COVID Date
covid_cases_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"
covid_deaths_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"
#Read Data to CSV
deaths <- read.csv(url(covid_deaths_url), stringsAsFactors = FALSE)
cases <- read.csv(url(covid_cases_url), stringsAsFactors = FALSE)
# Cleaning Cases Data -----------------------------------------------------
cases <-
cases %>%
filter(Country_Region == "US" & Province_State =="Florida") %>%
rename(County = Admin2) %>%
select(County, X1.22.20:ncol(cases)) %>%
filter(!County %in% c(
"Out of FL",
"Unassigned"
))
cases <- pivot_longer(cases, cols = X1.22.20:ncol(cases), names_to = "Date", values_to = "case_count")
# Remove X from date column
cases$Date <- gsub("X", "", cases$Date)
# set Date column to Date
cases$Date <- as.Date(cases$Date, format ="%m.%d.%y")
# Cleaning Deaths Data ----------------------------------------------------
deaths <-
deaths %>%
filter(Country_Region == "US" & Province_State == "Florida") %>%
rename(County = Admin2) %>%
select(County, X1.22.20:ncol(deaths)) %>%
filter(!County %in% c(
"Out of FL",
"Unassigned"
))
#Pivot data
deaths <- pivot_longer(deaths, cols = X1.22.20:ncol(deaths), names_to = "Date", values_to = "death_count")
#Remove X from date column
deaths$Date <- gsub("X", "", deaths$Date)
#Change data type to Date of Date column
deaths$Date <- as.Date(deaths$Date, format = "%m.%d.%y")
# Cleaning Population Data ------------------------------------------------
pop_data_clean <-
pop_data_raw %>%
mutate(County = gsub(" County", "", County)) %>%
clean_names()
# Cleaning Mobility Data --------------------------------------------------
#Select sub region florida only
mobility_data_clean <-
mobility_data_raw %>%
filter(sub.region == "Florida") %>%
clean_names()
#Select only Florida counties
mobility_data_clean <-
mobility_data_clean %>%
filter(geo_type == "county") %>%
clean_names()
#Remove County string from county, select correct columns
mobility_data_clean <-
mobility_data_clean %>%
mutate(region = gsub(" County", "", region)) %>%
select(region, x2020_01_13:ncol(mobility_data_clean)) %>%
clean_names()
# Pivot table to match formats
mobility_data_clean <-
pivot_longer(mobility_data_clean,
cols = x2020_01_13:ncol(mobility_data_clean),
names_to = "Date",
values_to ="Mobility"
)
# Remove X character from date string
mobility_data_clean <-
mobility_data_clean %>%
mutate(Date = gsub("x", "", Date)) %>%
clean_names()
#Change date column from char to date
mobility_data_clean <-
mobility_data_clean %>%
mutate(date = as.Date(date, format = "%Y_%m_%d"))
# Joining Election Data with COVID Data -----------------------------------
election_data <-
election_data %>%
rename(County = "誰..Vote.by.county")
main_data_cases <-
cases %>%
left_join(election_data, by = "County") %>%
clean_names()
main_data_deaths <-
deaths %>%
left_join(election_data, by = "County") %>%
clean_names()
# Joining Mobility Data ---------------------------------------------------
mobility_data_clean <-
mobility_data_clean %>%
rename(county = region) %>%
clean_names()
main_data_cases <-
main_data_cases %>%
left_join(mobility_data_clean, by = c("county", "date")) %>%
clean_names()
main_data_deaths <-
main_data_deaths %>%
left_join(mobility_data_clean, by = c("county", "date")) %>%
clean_names()
# Normalizing Counts by Pop -----------------------------------------------
norm_case_data <-
main_data_cases %>%
inner_join(pop_data_clean, by = "county") %>%
mutate(population = as.integer(gsub(",","", population))) %>% #Removes `,` and makes int
mutate(normalized_cases = case_count/population) %>%
clean_names()
death_norm_data <-
main_data_deaths %>%
inner_join(pop_data_clean, by = "county")%>%
mutate(population = as.integer((gsub(",", "", population)))) %>%
mutate(deaths_normalized = death_count/population) %>%
clean_names()
# Graphing Data -----------------------------------------------------------
# graphing data from picture of histogram and bar chart look at ggpubr::ggscatterhist()
# Cases
graph_data_cases <-
main_data_cases %>%
mutate(party = as.factor(party)) %>%
filter(case_count > 0)
#Filter for cases above 0 to help focus on important data
norm_case_data <-
norm_case_data %>%
filter(normalized_cases > 0)
#Refactor to correct colors
norm_case_data$party <- factor(
norm_case_data$party, levels = c("republican", "democrat")
)
# Graph scatter plot
norm_case_data %>%
ggplot(aes(x=date, y = normalized_cases, group = county, color=party)) +
geom_line() +
geom_point()
# Deaths final clean up and graph -----------------------------------------
#deaths normalized graph
death_norm_data <-
death_norm_data %>%
mutate(party = as.factor(party)) %>%
filter(death_count >0)
#Re factor Party
death_norm_data$party <- factor(
death_norm_data$party, levels = c("republican", "democrat")
)
death_norm_data %>%
ggplot(aes(x=date, y = deaths_normalized, group = county, color = party)) +
geom_line() +
geom_point()
?lm
View(main_data_cases)
View(norm_case_data)
ggplot(norm_case_data, aes(x=date)) +
geom_scatter(aes(y=mobility)) +
geom_scatter(aes(y = normalized_cases))
ggplot(norm_case_data, aes(x=date)) +
geom_point(aes(y=mobility)) +
geom_point(aes(y = normalized_cases))
ggplot(norm_case_data, aes(x=date)) +
geom_point(aes(y=mobility, color = "mobility")) +
geom_point(aes(y = normalized_cases, color = "normalized_cases"))
?lm
